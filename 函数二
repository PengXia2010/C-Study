#define _CRT_SECURE_NO_WARNINGS 1

#include <stdio.h>
#include <math.h>

//是素数返回1，不是素数返回0
//int is_prime(int x)
//{
//	int j = 0;
//	for (j = 2; j <= sqrt(x); j++)
//	{
//		if (x % j == 0)
//			return 0;
//
//	}
//	return 1;
//}
//
//int main()
//{
//	//打印100-200之间的素数
//	int i = 0;
//	for (i=100;i<200;i++)
//	{
//		//判断是否为素数
//		if (is_prime(i) == 1)
//			printf("%d  ",i);
//	}
//
//	return 0;
//}


//写一个函数，判断一个数是闰年
//int is_leap_year(int y)
//{
//	if ((y % 4 == 0 && y % 100 != 0) || y % 400 == 0)
//		return 1;
//	else
//		return 0;
//}
//
//int main()
//{
//	int year = 0;
//	for (year = 1000; year <= 2000; year++)
//	{
//		if (1 == is_leap_year(year))
//		{
//			printf("%d ",year);
//		}
//	}
//
//	return 0;
//}


//二分查找
//在一个有序数组中查找具体的某个数
//找到返回下标，找不到返回-1
//int binary_search(int arr[], int k,int sz)
//{
//
//	int left = 0;
//	int right = sz - 1;
//
//	
//	while (left <= right)
//	{
//		int mid = (left + right) / 2;
//		if (arr[mid] < k)
//		{
//			left = mid + 1;
//
//		}
//		else if (arr[mid] > k)
//		{
//			right = mid - 1;
//		}
//		else
//		{
//			return mid;
//		}
//	}
//	return -1;
//}
//int main()
//{
//	
//	int arr[] = {1,2,3,4,5,6,7,8,9,10};
//	int k = 7;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int ret = binary_search(arr,k,sz);
//	if (ret == -1)
//	{
//		printf("找不到指定数字\n");
//	}
//	else
//	{
//		printf("找到了，下标是：%d ",ret);
//	}
//
//	return 0;
//}

//没调用一次函数，num+1
//void Add(int* p)
//{
//	(*p)++;
//}
//
//int main()
//{
//	int num = 0;
//	Add(&num);
//	printf("%d",num);	
//	Add(&num);
//	printf("%d", num);
//	Add(&num);
//	printf("%d", num);
//
//	return 0;
//}

